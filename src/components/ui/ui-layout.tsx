"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import * as React from "react";
import { ReactNode, Suspense, useEffect, useRef } from "react";
import toast, { Toaster } from "react-hot-toast";
import { AccountChecker } from "../account/account-ui";
import {
  ClusterChecker,
  ClusterUiSelect,
  ExplorerLink,
} from "../cluster/cluster-ui";
import { WalletButton } from "../solana/solana-provider";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "./dialog";

export function UiLayout({
  children,
  links,
}: {
  children: ReactNode;
  links: { label: string; path: string }[];
}) {
  const pathname = usePathname();

  return (
    <div className="min-h-screen bg-[#131518] text-white flex flex-col">
      <nav className="fixed top-0 z-50 w-full border-b border-[#2D3139] bg-[#1C2127]/95 backdrop-blur supports-[backdrop-filter]:bg-[#1C2127]/75">
        <div className="flex h-16 items-center px-4 md:px-6">
          <Link
            className="flex items-center gap-2 text-xl font-semibold"
            href="/"
          >
            <span className="bg-gradient-to-r from-[#6E56CF] to-[#A77BFF] bg-clip-text text-transparent">
              Clairvoy
            </span>
          </Link>
          <div className="ml-6 hidden md:flex">
            {links.map(({ label, path }) => (
              <Link
                key={path}
                href={path}
                className={`px-4 py-2 text-lg font-medium transition-colors hover:text-[#6E56CF] ${
                  pathname.startsWith(path) ? "text-[#6E56CF]" : "text-gray-400"
                }`}
              >
                {label}
              </Link>
            ))}
          </div>
          <div className="ml-auto flex items-center gap-4">
            <WalletButton style={{ height: "38px" }} />
            <ClusterUiSelect />
          </div>
        </div>
      </nav>
      <div className="h-16"></div>
      <ClusterChecker>
        <AccountChecker />
      </ClusterChecker>
      <main className="flex-grow flex flex-col min-h-[calc(100vh-4rem)]">
        <Suspense
          fallback={
            <div className="flex items-center justify-center flex-grow">
              <div className="h-8 w-8 animate-spin rounded-full border-2 border-[#6E56CF] border-t-transparent" />
            </div>
          }
        >
          {children}
        </Suspense>
        <Toaster
          position="bottom-right"
          toastOptions={{
            style: {
              background: "#1C2127",
              color: "#fff",
              border: "1px solid #2D3139",
            },
          }}
        />
      </main>
      {/* <footer className="border-t border-[#2D3139] bg-[#1C2127] py-6 text-center text-sm text-gray-400">
        <p>
          Generated by{" "}
          <a
            className="text-[#6E56CF] hover:underline"
            href="https://github.com/solana-developers/create-solana-dapp"
            target="_blank"
            rel="noopener noreferrer"
          >
            create-solana-dapp
          </a>
        </p>
      </footer> */}
    </div>
  );
}

export function AppModal({
  children,
  title,
  hide,
  show,
  submit,
  submitDisabled,
  submitLabel,
}: {
  children: ReactNode;
  title: string;
  hide: () => void;
  show: boolean;
  submit?: () => void;
  submitDisabled?: boolean;
  submitLabel?: string;
}) {
  return (
    <Dialog open={show} onOpenChange={(open) => !open && hide()}>
      <DialogContent className="bg-[#1C2127] border-[#2D3139] text-white">
        <DialogHeader>
          <DialogTitle>{title}</DialogTitle>
        </DialogHeader>
        <div className="space-y-4">
          {children}
          <div className="flex justify-end gap-3">
            {submit && (
              <button
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors
                  ${
                    submitDisabled
                      ? "bg-[#2D3139] text-gray-400 cursor-not-allowed"
                      : "bg-[#6E56CF] hover:bg-[#7C6AD9] text-white"
                  }`}
                onClick={submit}
                disabled={submitDisabled}
              >
                {submitLabel || "Save"}
              </button>
            )}
            <button
              className="px-4 py-2 rounded-lg text-sm font-medium bg-[#2D3139] text-white hover:bg-[#363B44] transition-colors"
              onClick={hide}
            >
              Close
            </button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

export function AppHero({
  children,
  title,
  subtitle,
}: {
  children?: ReactNode;
  title: ReactNode;
  subtitle: ReactNode;
}) {
  return (
    <div className="w-full py-16 text-center">
      <div className="max-w-4xl mx-auto px-4">
        {typeof title === "string" ? (
          <h1 className="text-4xl font-bold tracking-tight bg-gradient-to-r from-purple-400 via-indigo-400 to-blue-400 text-transparent bg-clip-text">
            {title}
          </h1>
        ) : (
          title
        )}
        {typeof subtitle === "string" ? (
          <p className="mt-4 text-lg text-gray-400">{subtitle}</p>
        ) : (
          subtitle
        )}
        {children && <div className="mt-8">{children}</div>}
      </div>
    </div>
  );
}

export function ellipsify(str = "", len = 4) {
  if (str.length > 30) {
    return (
      str.substring(0, len) + ".." + str.substring(str.length - len, str.length)
    );
  }
  return str;
}

export function useTransactionToast() {
  return (signature: string) => {
    toast.success(
      <div className="text-center space-y-2">
        <div className="text-sm font-medium">Transaction sent</div>
        <ExplorerLink
          path={`tx/${signature}`}
          label="View Transaction"
          className="text-xs px-3 py-1.5 rounded-lg bg-[#6E56CF] hover:bg-[#7C6AD9] transition-colors"
        />
      </div>
    );
  };
}
